"""
This code simulates the processes of the Ground Station Server.
"""

from time import  perf_counter_ns
import threading            # for multi-thread support
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.serialization import load_pem_public_key
import client_server_auth.src.actions as actions
import client_server_auth.config as config
from pqcrypto.pqcrypto.kem.kyber512 import encrypt, decrypt
from hkdf.hkdf import hkdf_expand, hkdf_extract
from sign_and_verify import *
import hmac
import hashlib
from Crypto.Random import get_random_bytes

class ClientHandler(threading.Thread):
    def __init__(self, _socket):
        threading.Thread.__init__(self)
        self.socket = _socket
        self.sign_pri = b'\xf3\xb1+\xc2\xdc\x05\x1akw:\xa7\xad\xb3\x154\xa3\xc0\xae\xb2\x91M}\x91F\xd6\xec%\x12\xe9\rdFV\x17\xd4\x1b\xf02$\x00I8\x18\x93j\xfb*[\xe1\xa8F@\x06\t9\xb4w\x91\xaa\x92\x11\xccSzJo\x8eFh\xc4\x90\x9dz\xc1\xa2\xdea\x9f\xbe\x84J\xccl~e\xe69o\x1b)\xefj\xb1ob\t\xe7\x9c\xc2\x9c\xcc\x1a^\xea\x13j\x95\xb6YW\x08\x8e9\x8eF\x15\xcav\xbc\xb4\x02\x89L\x96\nJg\xec-HT\xc2\xd3\x14b\x04\xean\xcdy!\xeb\xb4K\xc4\xd9\x1erw\x15\xfb\xba\xc9\xd0\x1bW"b6n\x87n\xc7\xb1\x91\x02dd\xbdW\x7f\xdc\xa6\x84\xc9\xf7\xa7\x0c\x98a:\x19=D J `h\xa9TB]\x19\x93\t\'#\xa8\xcb\xa0=\x8bW\xf5\x8b"MF!\xfb T`\xc3Yz\x06h\xd9)r\xcc\xe6\x89\xe5v]\xa4\x14\xa6\xdbT?\x06\xa6^\xdea\x9ek\xe1\x05O4\xad\x9e(d\xe6\x9b\xcdg\xe7\xb2\xb5\xf3>tZb\xbc9h\x9a\x8c\xabx\xd6:\x10\xb7+\x05\x9b~\xc7\xda\x92$\x85\x84\xc6\xd8[\xba\xf7A\xe6k\xad\x88\xe7\xa5\xf6`-\xb0\x9b\xaf_\xfc/\xd52H\xf0\xc9\x1dA\x85\x0e\x8f\xbb\xa90\xf0.\x99\x19!v*>\x81[\xb5Pjh\x12\x91|\x92\x95k\x1e\x8c*kE\x15 \xe1\x06\x84\'\x1ad\xf3\x92\xfd\x80\x1a\x98\xf7\xac\xedWS&\xf8\x8f\x83\x95\xa2L\xe4\x19"\xc9&\xcaq\x8e:Hw\xc6\x9a\xb4\x88a\xb9n\x00\x15\xf2k*U4]^\x033\n\xe5\x08E\xf4N\x84R{\t\x8b\x97\x13\xa6\x1e\x8d\xe9<.\x81\xb6\x85)no\x03\x92\xce\x89iN\xfb\x0f{\xcce\xe1CQ\xe4\xe1\x92!\x1b\xb4b\xa3\x1e-\xdc\x8az\xbc\x1dG\x05^\xf7a\xc2h\xe6\x0b\xdc\x16\x987\xca\xc3BKx\xa5\xda`:Pd\xca{\xce\x8eD\x91\xda\xca+n<\xc5\xee\xa6\x07\x1e\xb3\x1d%\x82\x1aq\xbb\x9e\xc0bN\xce\xa5.\x02#\x7f/\xb2<\x1b\xc3cP\x07\xb6:\xc5;\xfaV\x82\xfc\x10r\x06aK\xbd\xa3k\xb7+\xb1\xbdZ\x84\xc9Fx/R\xae\xc6b\x98M\xba2\x92lTJ\xdaC,E#CU\xac\xff\x82*\x18\xb1\x91\r\xda\xa1A)\x95\x01\xe5$@\xf6\xbe,2c\r3\x06\x86{\x06-\xa1\x8aO<r\xfc\xdb\x88\xc5Z\x183\x91\x96H*\xa5f)\x93zs\xbb\x8b\x88I\xbf\xb1\xaf\xbc\xd15|\xaci."+p<\xc9\x8baZ+\xb9cj\xf8\\\x8d\x1a\x87p\xf72\xc3\xb6\xaeK\x047&\xb9\x7f\x01\xebz\x99\xe11V\xe0v\xffug\x88(w\x83\xaa->\xd7-\x98+\xaf3&\xcf\x9dR\xa1\x03\xa36\xa6X`\xad\xd0\x87\x86\x10\xa5\x02,y+c\x90\x12\x03T\xb6\xdbs!\xdb\x95\x98\xc7+(\xd2\x91\xe1\x18\n\r;\xa4\x87Q^7Ew\xaf\xa9\xb3\xbf\xe9<\x19\\\xc6\x8d\x13]5\xc9\xa3\x8e\xb3\x01\x83y\xa3\xf2\xc3g\xba\xe6\x95\xa1\x87\xb8f\x87\x95\xa5\xb4\x9c\xe9\x84\xbf\xfd\x83\x9f\x9f|w\x9a\xd0#\xf9S<\xdel\xc7y\x1b\x82n\x16\x13<\xc2\'\xb7 \xbaK!\xc9\x19"\xb12\xc1g(\x14T\xcf\xa3\x87q\x9c6AX\x08\x04Z`\n\xcc\x99\xd0\xe7\x80!\xb2C\xe7\x85\x10\x911\x81\xef\xa3\xae\xfe\xd3\x8d\xaf\xd7^~qB\x96\xfa?\xec\x13\x92\xb1P\xb0\xe6\x18l\xde\x8aK|S\xbc\xf7\x87\x16d\xc5\x1fi\xc5\x0eL\xf6\x93\x8b\xf5\xc2N\xc96\x93$\xc0\xd5\xe6\xa1G\xc08\xc7(\x9a\x1c\xd2\xc8\xfa\x94\x87\x8fx\t\xa2p\xc8\x82\xf0\x15\x0c\x07y6\x01&6\xab\xb3qHE\xa127\xc0l\xa5L\x92\xc6\x84\x14w\xfe\xf2t8\xb3\xc4\xd3\xfc\x02\xd7&\x95\x03+\xc9\xe4\xa6\x03\x17\xf8}<\xb84j\xc4\xb7\x89S\xa7}\xfcx\xec\x8bKS\x88\xc3\xe8\x19\x88\xa5C\x894\xf6u\x17\xcbCX;\x1c\xb3\xb4`P\x99U\xbe\x00\xbf\x02kh\xed\xa8S\xc7\xd2:5\'}\x9f\xf0n]H\xa6\x08\xb5Z^G\x01\xb0\xf1\x80_\x83Uh\xf6v&\x8c\x1f\xc2p\t\x1b\xc6K>\x89?u\xbc\xc3\xa2\x96[]\x81\x83\xa1{\x92\x99\xcaf\x16w\x0e\xaeF\x1d\xe3f&\x91\xb8\xbc\x9c\xe6\x9e\xe2\xc7\x88\x88|\xbe\xe2\xf3\xb3p\xf5\x1f\xcd\x91\x86_ \x9d\xd1\xca\x893\xc3\xa91\x01%G\xbc4\x99\xea\x95\xc2\x18\xa0\xde\xa1\x15\x0b\x9b\x13\xeb\x9a\xa3\xa0\xd1%F\x11ua\xb6\x97\x13\xb8\xb0s\xe9S!$\xb3\x11\xa8>\x84\xcc\xa7r\xe7]\xf0I#\xae\xc8>j\x003\x80\nbZ\xd7\x97\x1e\xfbs\xa6\xa8Ko\xf0\x94\xfb\xc4\n\xf0\x99\xae\t*\xa9\xd5\x8a2Zz~\xc0\x927m\xa9a\x05yY\xb9\xfc\xady\xd6j\xb1\xd9a0\x98\x04\xcc;\x89\xbe\xc5\x9c\x0cL\xabO$?\x08\xc0~>\xb7\xb4\xc7;W\xa1\xf5w\xa0\x0b\xa3\x00\x04ERF\xc8\'\x03\xca\xb8\x149\x00\x11\x00*\x1b\\\x8c\x88L\xf4*\x18/\xc8\\2\xc6\xc1c\x8b&Q\xa8K\xae\x86\x11\x18\x8b \xc5$\xab\xb3U\x9b\x83B\x83Q\xd39\x8f\xb1+\x90\x19g\xf9\x02[Lt\xb9\xa5G\xcfy\x8bbm\xc6\xb4\xe4u\xbeqW\x87\xe1So\xe1\xb6>E*\n\x85\xe2\xa6,\x03\x87Q\xf8\xaa\xa7\xc9_\x10\x80REE\t\xf1\xb7\x80_b\x8c\xae\xc1vL\xe1\xbb\\\xd3lB\xd0$\x9f\xdc\xce\x9f\xab@\x93\xe31\x7f1\x91\xa7\xd1Ix\xb8?\xdf5\x12\xcb\xe8\x0f\xf2F\x85\xad\x8a\x0b\xaf\nF\xe8U\xc5\x84TH\x9d\xf74\xba!\x94\x8a\x82\x0e\x1aBC\xe5\x02\xc0\xa8UY\xd5\xbc\x00\xa2\xd8\xc7\xd0!\x84\x90z]\x97U&\xb5x\xab\xa5w\xad\x84\xd5\x9eJ\x0c\xa3\x8b\x8b\x1cm2\x9e\xb1\xe0\xa2\x03\xf9`\x81\xdc\xb4\xab;V-\xc2 {J$I\x06\x0f\xdd\xac&\x88\xb7\x1c\xa2\xebF\xa8\xa3\x84|[\x05\xf0\xe4(\xf7\xf7\xce\x92\x17s6\x10\x8d(\x08\x89\x12B\x9b\xb4\xfc\x86|Zi\xfa:tN\x15\x1c0X\x02\xd4\'G\x94U\x90K@S\xdc\n)\x8e\x936ztxu\x1bp\x9c,9)\xe9vE\x94\xd4\xe1]\xbb\xdah\xb2?\x02\x17\x97\x84\x1f6\xdcBCw\xdc\xe1\xecO\xd9L\x9b%\xc7`pEl\xc6t\xe3\xfd\x19\xbbJ\x10\x91\xd3\x82U\xae\xf1\xae\xd2\xc3\x04w\xf5\x9du\x81\xe2\xb1\x91\x9a\x8e\x05`\x9a\x85A>\xc0\xf8\xe0\xbfW1\xa3\x8a.\xe3,\x99N\x06\xb9>\x7f\xee\xb5\x9a\x97#\x19'
        self.sign_pub = b'\xfd\x83\x9f\x9f|w\x9a\xd0#\xf9S<\xdel\xc7y\x1b\x82n\x16\x13<\xc2\'\xb7 \xbaK!\xc9\x19"\xb12\xc1g(\x14T\xcf\xa3\x87q\x9c6AX\x08\x04Z`\n\xcc\x99\xd0\xe7\x80!\xb2C\xe7\x85\x10\x911\x81\xef\xa3\xae\xfe\xd3\x8d\xaf\xd7^~qB\x96\xfa?\xec\x13\x92\xb1P\xb0\xe6\x18l\xde\x8aK|S\xbc\xf7\x87\x16d\xc5\x1fi\xc5\x0eL\xf6\x93\x8b\xf5\xc2N\xc96\x93$\xc0\xd5\xe6\xa1G\xc08\xc7(\x9a\x1c\xd2\xc8\xfa\x94\x87\x8fx\t\xa2p\xc8\x82\xf0\x15\x0c\x07y6\x01&6\xab\xb3qHE\xa127\xc0l\xa5L\x92\xc6\x84\x14w\xfe\xf2t8\xb3\xc4\xd3\xfc\x02\xd7&\x95\x03+\xc9\xe4\xa6\x03\x17\xf8}<\xb84j\xc4\xb7\x89S\xa7}\xfcx\xec\x8bKS\x88\xc3\xe8\x19\x88\xa5C\x894\xf6u\x17\xcbCX;\x1c\xb3\xb4`P\x99U\xbe\x00\xbf\x02kh\xed\xa8S\xc7\xd2:5\'}\x9f\xf0n]H\xa6\x08\xb5Z^G\x01\xb0\xf1\x80_\x83Uh\xf6v&\x8c\x1f\xc2p\t\x1b\xc6K>\x89?u\xbc\xc3\xa2\x96[]\x81\x83\xa1{\x92\x99\xcaf\x16w\x0e\xaeF\x1d\xe3f&\x91\xb8\xbc\x9c\xe6\x9e\xe2\xc7\x88\x88|\xbe\xe2\xf3\xb3p\xf5\x1f\xcd\x91\x86_ \x9d\xd1\xca\x893\xc3\xa91\x01%G\xbc4\x99\xea\x95\xc2\x18\xa0\xde\xa1\x15\x0b\x9b\x13\xeb\x9a\xa3\xa0\xd1%F\x11ua\xb6\x97\x13\xb8\xb0s\xe9S!$\xb3\x11\xa8>\x84\xcc\xa7r\xe7]\xf0I#\xae\xc8>j\x003\x80\nbZ\xd7\x97\x1e\xfbs\xa6\xa8Ko\xf0\x94\xfb\xc4\n\xf0\x99\xae\t*\xa9\xd5\x8a2Zz~\xc0\x927m\xa9a\x05yY\xb9\xfc\xady\xd6j\xb1\xd9a0\x98\x04\xcc;\x89\xbe\xc5\x9c\x0cL\xabO$?\x08\xc0~>\xb7\xb4\xc7;W\xa1\xf5w\xa0\x0b\xa3\x00\x04ERF\xc8\'\x03\xca\xb8\x149\x00\x11\x00*\x1b\\\x8c\x88L\xf4*\x18/\xc8\\2\xc6\xc1c\x8b&Q\xa8K\xae\x86\x11\x18\x8b \xc5$\xab\xb3U\x9b\x83B\x83Q\xd39\x8f\xb1+\x90\x19g\xf9\x02[Lt\xb9\xa5G\xcfy\x8bbm\xc6\xb4\xe4u\xbeqW\x87\xe1So\xe1\xb6>E*\n\x85\xe2\xa6,\x03\x87Q\xf8\xaa\xa7\xc9_\x10\x80REE\t\xf1\xb7\x80_b\x8c\xae\xc1vL\xe1\xbb\\\xd3lB\xd0$\x9f\xdc\xce\x9f\xab@\x93\xe31\x7f1\x91\xa7\xd1Ix\xb8?\xdf5\x12\xcb\xe8\x0f\xf2F\x85\xad\x8a\x0b\xaf\nF\xe8U\xc5\x84TH\x9d\xf74\xba!\x94\x8a\x82\x0e\x1aBC\xe5\x02\xc0\xa8UY\xd5\xbc\x00\xa2\xd8\xc7\xd0!\x84\x90z]\x97U&\xb5x\xab\xa5w\xad\x84\xd5\x9eJ\x0c\xa3\x8b\x8b\x1cm2\x9e\xb1\xe0\xa2\x03\xf9`\x81\xdc\xb4\xab;V-\xc2 {J$I\x06\x0f\xdd\xac&\x88\xb7\x1c\xa2\xebF\xa8\xa3\x84|[\x05\xf0\xe4(\xf7\xf7\xce\x92\x17s6\x10\x8d(\x08\x89\x12B\x9b\xb4\xfc\x86|Zi\xfa:tN\x15\x1c0X\x02\xd4\'G\x94U\x90K@S\xdc\n)\x8e\x936ztxu\x1bp\x9c,9)\xe9vE\x94\xd4\xe1]\xbb\xdah\xb2?\x02\x17\x97\x84\x1f6\xdcBCw\xdc\xe1\xecO\xd9L'
        self.sign_pub_as = b'T8\\(\x1c :\x08}\x12VI\x12\xb2\x19\x11\xd0M\xe59F.|2\xadz\n\xf6\xe1g\x9e$\xc9\x83\x81u\xaa\x89k\x8d\x82<\x04\xf4(\r\xe9\x1e\xabG\x9e]f\n\x80\xf4\t\x93\x8bT\xf0\xa0\x05\xcf<\xbbH2,\x86\x1a\xc7\xba\x83\x9e\xcf\xa2Y\xa7\xfb|\x8cr\x06w\x08\r\x1bEj\nC\xa9\n)\x99\xc4\xa9\x14\x03\x06t\xee\'fp9/\x8ek\xaa\xb0\xf4\xc6\xa9\xcb\x8b\xd3+]<\xb7-j0\x18\x16Qn\x80(A\xf2\xd4\xaf\x9c)\x9fN\xe0\r(\x05cv\xa2\x7f"[u7\xa5\xb8\x1ba\x1eJ\xa1\x96\xded\xbf\xce\xc1bu9g\xdeb*7SUz\xfa\x866Z\xaf\xbb{W\xa0\x16=\xed\xa5\x07\xa9:Q\xb3ca!0EN\x90\x16R\xe6\xa2\xa4\xec9<g r\xfbi\xfa2.\xd4\x81\xafK\x80\x11-C\x05\xd6\xbc>\xb6;i+eAi\xc6\xc3\xba\x93\x1b\xb3\xf5tq\xf23\xe7A\xc7<8\x1a\xda7\xbf4\x8b\x88\xce\x8c\x9b\x9d\x88\x11\xe0\xab\x175\x90^]\x95Rr\xf8\x1c\xca\xc0Q\x1a\x03\x84\xb5`xx\x08\xa4\x1b\xd5is\xe8\xc3\xd6\xd1;\x0e\x852h)h\x8aU\x9e\x11\x04/!lX\xbcP*\xc2\xcc\x91\x95\'\x1a\xf8\x8a\x9d\x80\t\xa1g\xaa\xc0Z\x11\x81\xb1FM\xb9\xc7 \xa8(x@\xb44\xb7\xb49\xef\t\x07\xa1\xebW\xa1\xe8\x1fY\xf3\x8b\xa4G\xb0U, \xce\xca\xa3\xca\xe8\x15\xca\xd4\xb8\x18\xb5\x1en\xc6}f\xf5\xc9,)\x19?\xcb\x8a\xb5\xd7\x8cH\x18^Zv\x1f\xb2\xc8eLK\x90uZ\x01\xb9\xb2\xc7\xc6\xbb5\xf0;\xcb\xfa\xb4\xae;\xe0T\xc4zQ\xd2\xfa\x84\x11U\x13\xe6\xf4l;\xdc\xb4\x12+aYJD\x9d\xe4\xa4u\xa5\x8e+\xa6&\xbd\xf8\xc9\xbe\xaa\x05\xc4EHC\xd4\x1f\x93\x92[\x9b;\xc6\xbfq\x1b\xebS?\x01\x91\x13\xe6VS\xaa\xc2\xa2\xac\xe9\x94\xf3\xe4\xc0\xe0\x1c\xa5\xd3\x89\xa6\xd9\x1aXIk\x96\x8f\xe4@t\xdc\xcb\xe9\nu\x8c\x12\x03\xdc\x871\xa1zT\xea\xdc\xcf\xffX\xa3\r\x8c\x82-)_?w\xcc\xe5\xc9\x11`\x93qzE\x9d\xe6s\xc4\xe9Q\x96\x0bs\x85(z[\xf7r\x07\x84\xc1\xad\xf2\x06\x89\x8b,\xa7\xf6\x965\x96\xfb\x04\xabs\xb3I;+t\xd5\xb3\x11\xfb\xc6\xa9\x94\x11\xce|WTl\xc6\x8fcpm\x83\x98\x93\x86Z\xa1\x9cX\xc5)B\xc1l\xc0\xa1\n\x0f\x99[3\x83\xdc\x1dQ\xf5{\xdd\xf6G@\xa72 L\xac\xa6\xa5\xab\xaaL\x19\x7f\x94\x1e=\t\xacz\x8c\xbd\xaf\x8c>\xb2v\xa4\x1b\xbcd\x99\xb2\xb6\xd9E\xab\xb1h\x9f^\xc1|\xab2`\x89@\x12Ay~\xa5\x0cR\xa0J\x1e\x94g\xb3\x92\xe1:\xe1\xc4\x80\xb5UPr,D\xb8\xb5{U\x04\x07\x84\x16a\xb1\x14\x11g\x00\x98\x06pe\xdb\x01\x86xg\x9ba\xb4O\xbf\xa4\x8d\x08\xcb/m\\\x16[\xd5$;S\x07\x01\xa6\x9e\xe4G\xc2\x82S<p\xb7\xce3 V\x88\x0cD\xf8:#`\x1c\x99\x16\xcf\x82"\x16t\xc0\xb5qD\xfc\xff\x00f\xaaB<sKq\x19n9\xc2,\xee\xd6\xf6\xca\xd2\x94\t'
        self.randomnum = 0
        self.identity = b"GS1001"
        self.verification = False
        self.final_shared_mac=b""
        self.rand_bytes=b""
        self.public_key = b""
        self.ciphertext = b""
        self.ecc_key_as = b""


    def receive(self):
        """
        receives and returns message from client
        catch an error if connection brakes
        """
        input_line = None #None
        try:
            input_line = self.socket.recv(config.BUFFER_SIZE)

        except:
            pass

        return input_line

    def recvall(self, size):
        result = b''
        remaining = size
        while remaining > 0:
            data = self.socket.recv(remaining)
            result += data
            remaining -= len(data)
        return result

    def send(self, message):
        """
        sends message through socket to client
        catch an error if connection brakes
        """
        try:
            self.socket.sendall(message.encode())
        except:
            pass



    def kem(self):

            """ KEM function to generate shared keys
             Receive values are specifically written for chosen primitives.
            Can be modified according to preferred crypto module."""
            # print ("Calculating shared keys......")
            public_key = None
            self.send(actions.KEM_ACTION)
            combined = self.recvall(1584)#server sign_ct, client_pq_enc_pk
            ec_pubK_as = self.recvall(178)#client sign_ec_pk
            as_sigK = self.recvall(800)#client sign_pq_pk
            as_enK = self.recvall(178)#client enc_ec_pk
            self.public_key = combined[:-784]
            self.rand_bytes = combined[800:816]
            gs_sign_ct = combined[816:1552]
            gs_sign_hash = combined[1552:]

            #hash validation

            compare_hash = hashlib.sha256(as_sigK).digest()
            result = (gs_sign_hash == compare_hash)

            if (result):

                #generate gs ecc key pair for signing
                ecc_private_key = ec.generate_private_key(
                    ec.SECP256R1
                )
                ecc_public_key = ecc_private_key.public_key().public_bytes(serialization.Encoding.PEM,
                                                                           serialization.PublicFormat.SubjectPublicKeyInfo)

                # generate gs ecc key pair for encryption
                ecc_en_sk = ec.generate_private_key(
                    ec.SECP256R1
                )
                ecc_en_pk = ecc_private_key.public_key().public_bytes(serialization.Encoding.PEM,
                                                                      serialization.PublicFormat.SubjectPublicKeyInfo)

                #ecc sign key decode &shared key gen

                ecc_key_as_decoded = load_pem_public_key(ec_pubK_as, default_backend())
                shared_ec_key = ecc_private_key.exchange(ec.ECDH(), ecc_key_as_decoded)

                # ecc encryption key decode &shared key gen

                ecc_en_as_decoded = load_pem_public_key(as_enK, default_backend())
                shared_ec_enK = ecc_en_sk.exchange(ec.ECDH(), ecc_en_as_decoded)


                #sign K derivation
                decap_signK = decrypt(self.sign_pri,gs_sign_ct)
                early_secret = hkdf_extract(shared_ec_key,decap_signK) #hybrid key
                derived_es = hkdf_expand(early_secret, info=b"derived")


                #encryption key encapsulation
                e_ct, e_pt = encrypt(self.public_key)

                #send e_ct back to as
                self.randomnum = get_random_bytes(16)
                self.socket.send(e_ct+self.randomnum)#pq_enc_ct
                self.socket.send(ecc_public_key)#ecc_pubK
                self.socket.send(ecc_en_pk)#ecc_en_pubK

                #early encryption key derivation
                early_en_secret = hkdf_extract(shared_ec_enK, e_pt)  # hybrid key
                derived_en_es = hkdf_expand(early_en_secret, info=b"derived")


                #as sign key encapsulation
                as_sign_ct, as_sign_pt = encrypt(as_sigK)

                self.socket.send(as_sign_ct)

                #further key derivations

                hs = hkdf_extract(derived_es,derived_en_es)
                derived_hs = hkdf_expand(hs, info =b"derived")
                master_secret = hkdf_extract(derived_hs, as_sign_pt)
                fk_c = hkdf_expand(master_secret, info=b"c finished")
                fk_s = hkdf_expand(master_secret, info=b"s finished")


                "calculate and send hash"
                sign_pub_hash = hashlib.sha256(self.sign_pub).digest()
                self.socket.send(sign_pub_hash)

                "calculate and send mac"
                calculate_mac = hmac.digest(key = fk_s, msg = b"some string", digest =hashlib.sha256)
                self.socket.send(calculate_mac)
                #print(calculate_mac.digest_size)


                print('fk_c',fk_c)
                print('fk_s',fk_s)


    def mac(self):

        #MAC verification

        receive_mac = self.recvall(32)
        mac_start = perf_counter_ns()
        calculated_mac = hmac.digest(key=self.final_shared_mac,
                                      msg=(b"AS1001" + self.rand_bytes + self.ecc_key_as + self.public_key) +
                                          (self.identity + self.randomnum + self.ciphertext),
                                      digest="sha256")
        result = hmac.compare_digest(receive_mac, calculated_mac)
        mac_stop = perf_counter_ns()
        print(mac_stop-mac_start)
        return result


    def run(self):
        """
        main function when thread starts
        to manage connection with client
        """
        self.send(b"Connected to server")

        while True:
            self.send(b"\nWhat do you want to do? (kem/quit)")
            self.send(actions.TYPE_ACTION)
            current_type = self.receive()                              # get type
            if current_type is None:                                    # connection broken
                break                                         # register action
            elif current_type == b"kem":
                self.kem()
            elif current_type == b"quit":
                self.send(actions.QUIT_ACTION)         # quit action
                break
            else:
                self.send(b"Unrecognized type")



        # user quit from server
        print ("Client disconnected")
        self.socket.close()                                             # Close the connection



