"""
This code simulates the processes of the Air Station/Aircraft.
"""

from time import perf_counter_ns
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.serialization import load_pem_public_key
from sign_and_verify import *
from hkdf.hkdf import hkdf_extract, hkdf_expand
from pqcrypto.pqcrypto.kem.kyber512 import generate_keypair,decrypt,encrypt
import client_server_auth.config as config
import client_server_auth.src.actions as actions
from Crypto.Random import get_random_bytes
import hmac
import hashlib


class Client:
    """
    Simple client class to handle connection to server
    """

    def __init__(self, _socket):

        self.socket = _socket
        self.ec_pri_key_as = None
        self.ec_pub_key_as = None
        self.ec_pk_en = None
        self.ec_sk_en = None
        self.identity = b"AS1001"
        self.sign_pri = b'\xe6Vv\x1f\xebU\xe0\xd4\xb4\r\x17\x91\x95\x18\xc8\xf6\xd6\x8a\xaaR\xb7&g< \x85L\xba\x188\xb5\x83eHP\xb7/Z\xca\x7f\x99\x15*\xe0\x1c+KJ\x8e!\xc9e\x9ct\xd5\xa1gf\xc31D\xc5n]\xb4@^\xb8\x9b\xfb\xc5\x81]\xd3:$\xb8}\xc4\xfc\x17\xa1\xa0\x82/\xa2\xb2\xc3Q\xa2;\x95\xb7\x8c\x10doI\x8b`x\x84\xfe\x92\xcf\xe2@)\xac\xa1{\x9bc\x14\xe7\x18h\x9a\xd0\x8e\x89u2\xe3\xe0X\xfat\x88c7\xa5\x17\xf0RL\xa6\\]\'\x88R\x86\x8dM\x13\x13\xab\xbb\x01;\xe2\xcft\xd3H\xeb\xf1\xab@1\x95\x95\xf3\x03\xdfQX\xecx;\x1f4\xc1\x8c\x08\x1fD\x89\xc54\xc4%a\xe7$\xa6\x0cr?y\xb5ox\xa5\x83c\xa7\xe8\xf9]8\xf08\xf3\xb2\x99P\xe8\x97\xc1\x0731\xcc8\xc4\xc1\xc97\xc2\x7fE8!H\x11\xa4F\n=Q\xe8\xbd_\x9b\x8d\xab\x81\xad\x8e4u\xe8\xc4E\xf2S8\xeab\x18\xc0a\xbb\xd1\x08u\x1a\xac\x90\xa7<\x9am\x03R\x90\x0c\\\xf1\xa8\xb3\xeb7l\x0c\xf3k$\xcc\xc2\xd1\xb12\x02\xf8\x1az\xbb\x7fU\xd6\x1a\x08\xc3\xca\xe91P\x91\x03*(\x10=\x9c 4`\xaa\x7f 9fi\x0b\xc2\xd5\xdb3T\x00\x1ai\xab\x8b\xa3\x83\x8cO\x9cz:\x15\x0f0\xdb\xb7\xf01k/y\x8f,G\xc8\xbe\xf9\xbaG\x98`\x14\x85\xa5\x89\xcb\x98\xf9\xbc\x9f\xc7W\xc9*\xb3\x9a\xb5\xd0\xcfF\xda \x8blC\x9b\xf3\xb5\r\xb3\xbf\xdb\xb6\xb4\xe3\x1c\xbe\xbc@|\\\xc4\xbb\x8a\xa6No\x8aD\xecv\x01\x81\xfai\x16\xab\xb8\xcel[\x16|\xb4\x85\xb1\x98\x16\x9c\x17@\x00HP`\x0f\x1a\xfb\x82\x84<\x12[dlq\x05\xc9&\x17|5\xd5\xa8\\\x9av\xa1\xf3)D\x01TI\xb4\xa7\xcc\x8bK*SH>\x18p\xed\xc4#\xa0X^\xe3\xea\x90\'\xfb\xab\xfe\xe1\x0b\xfd[T=4\xcd\x1d*\x08`g\x13Y\xec\xc7]67\xb1\x89\t\xb6W\x06,\xbcK-R\x8fx\xa3H\xfe\xf21G\xa5\x7f\xa3B*\x8e:co\x83pm\x87\x95\xa6\xeb]\xbe9+\x15\xe9\xa70\x90"\xd7\x08}\xf3\xd0%*\x1953\xf5\x0b\xfb\xca=\xc6\x89_\xe3VH\xc3\xd8n\x1d\x13\xcd\x002K\xdf\'74\xa8cW\xe4\xa6\xe5\xb7\xccrbPc\xd6\xc8I\xe6\xb2\x971h\xa09\x91+\x9b\xb9\xe1[r\xc7g\x88Z\n}\xbe{\xc4yc\x1d\xb4\xe0\x8c\xf5\x91\xc8\xbf*s\xcc\xc3x\xb99I\xa9I\x9aW\x1b[}\xa40\xf6fB\xc8\xc7S\xd0l\x7f\x80\xd7\x1bi\x81\x8c}[r\xf9\xca\xb6Y\xe5\x03\xe2\xa8G\xb0\x02\xa0)\t^\x11\xb3tL\x13\x1a\x00\x97\x01\xcaaq\x0bf\x02\r1V\xd94_nA\xcd\xe4i\x1c\xbc\xb2\xc9\xff\xd6]\xa5\\\x0c\xf4h9\xed\xb2Bx3|\xf44O\x87\x1b^\xf2\x15\xbf\x82tL\xa2\xcb\x1b,\xcc\x82!+M\xb7\xf6\xa3\x9d|\x06\xe8@\x8e~\xb7O\x1bG\x87\x8d\xdb\x90\x80\xf8m\xab\x93\xb6T8\\(\x1c :\x08}\x12VI\x12\xb2\x19\x11\xd0M\xe59F.|2\xadz\n\xf6\xe1g\x9e$\xc9\x83\x81u\xaa\x89k\x8d\x82<\x04\xf4(\r\xe9\x1e\xabG\x9e]f\n\x80\xf4\t\x93\x8bT\xf0\xa0\x05\xcf<\xbbH2,\x86\x1a\xc7\xba\x83\x9e\xcf\xa2Y\xa7\xfb|\x8cr\x06w\x08\r\x1bEj\nC\xa9\n)\x99\xc4\xa9\x14\x03\x06t\xee\'fp9/\x8ek\xaa\xb0\xf4\xc6\xa9\xcb\x8b\xd3+]<\xb7-j0\x18\x16Qn\x80(A\xf2\xd4\xaf\x9c)\x9fN\xe0\r(\x05cv\xa2\x7f"[u7\xa5\xb8\x1ba\x1eJ\xa1\x96\xded\xbf\xce\xc1bu9g\xdeb*7SUz\xfa\x866Z\xaf\xbb{W\xa0\x16=\xed\xa5\x07\xa9:Q\xb3ca!0EN\x90\x16R\xe6\xa2\xa4\xec9<g r\xfbi\xfa2.\xd4\x81\xafK\x80\x11-C\x05\xd6\xbc>\xb6;i+eAi\xc6\xc3\xba\x93\x1b\xb3\xf5tq\xf23\xe7A\xc7<8\x1a\xda7\xbf4\x8b\x88\xce\x8c\x9b\x9d\x88\x11\xe0\xab\x175\x90^]\x95Rr\xf8\x1c\xca\xc0Q\x1a\x03\x84\xb5`xx\x08\xa4\x1b\xd5is\xe8\xc3\xd6\xd1;\x0e\x852h)h\x8aU\x9e\x11\x04/!lX\xbcP*\xc2\xcc\x91\x95\'\x1a\xf8\x8a\x9d\x80\t\xa1g\xaa\xc0Z\x11\x81\xb1FM\xb9\xc7 \xa8(x@\xb44\xb7\xb49\xef\t\x07\xa1\xebW\xa1\xe8\x1fY\xf3\x8b\xa4G\xb0U, \xce\xca\xa3\xca\xe8\x15\xca\xd4\xb8\x18\xb5\x1en\xc6}f\xf5\xc9,)\x19?\xcb\x8a\xb5\xd7\x8cH\x18^Zv\x1f\xb2\xc8eLK\x90uZ\x01\xb9\xb2\xc7\xc6\xbb5\xf0;\xcb\xfa\xb4\xae;\xe0T\xc4zQ\xd2\xfa\x84\x11U\x13\xe6\xf4l;\xdc\xb4\x12+aYJD\x9d\xe4\xa4u\xa5\x8e+\xa6&\xbd\xf8\xc9\xbe\xaa\x05\xc4EHC\xd4\x1f\x93\x92[\x9b;\xc6\xbfq\x1b\xebS?\x01\x91\x13\xe6VS\xaa\xc2\xa2\xac\xe9\x94\xf3\xe4\xc0\xe0\x1c\xa5\xd3\x89\xa6\xd9\x1aXIk\x96\x8f\xe4@t\xdc\xcb\xe9\nu\x8c\x12\x03\xdc\x871\xa1zT\xea\xdc\xcf\xffX\xa3\r\x8c\x82-)_?w\xcc\xe5\xc9\x11`\x93qzE\x9d\xe6s\xc4\xe9Q\x96\x0bs\x85(z[\xf7r\x07\x84\xc1\xad\xf2\x06\x89\x8b,\xa7\xf6\x965\x96\xfb\x04\xabs\xb3I;+t\xd5\xb3\x11\xfb\xc6\xa9\x94\x11\xce|WTl\xc6\x8fcpm\x83\x98\x93\x86Z\xa1\x9cX\xc5)B\xc1l\xc0\xa1\n\x0f\x99[3\x83\xdc\x1dQ\xf5{\xdd\xf6G@\xa72 L\xac\xa6\xa5\xab\xaaL\x19\x7f\x94\x1e=\t\xacz\x8c\xbd\xaf\x8c>\xb2v\xa4\x1b\xbcd\x99\xb2\xb6\xd9E\xab\xb1h\x9f^\xc1|\xab2`\x89@\x12Ay~\xa5\x0cR\xa0J\x1e\x94g\xb3\x92\xe1:\xe1\xc4\x80\xb5UPr,D\xb8\xb5{U\x04\x07\x84\x16a\xb1\x14\x11g\x00\x98\x06pe\xdb\x01\x86xg\x9ba\xb4O\xbf\xa4\x8d\x08\xcb/m\\\x16[\xd5$;S\x07\x01\xa6\x9e\xe4G\xc2\x82S<p\xb7\xce3 V\x88\x0cD\xf8:#`\x1c\x99\x16\xcf\x82"\x16t\xc0\xb5qD\xfc\xff\x00f\xaaB<sKq\x19n9\xc2,\xee\xd6\xf6\xca\xd2\x94\tLc\xf0\xackE\xf4\x8anC\x96C\xda\xfe\x8e\xadG\xd6M\x83\xb6\xe4\x90_1p\xaa\xdd\xb1\xc0\x9f\x99\xab\x15\x8b\xd6%\xccC\x87\x91\xec\xac\xc8\x9el\x06\x8f\x94\x1d\xa1\xf6Z\x88\xd5\xbb\xf6h\x1fp\x955\xadX'
        self.sign_pub = b'T8\\(\x1c :\x08}\x12VI\x12\xb2\x19\x11\xd0M\xe59F.|2\xadz\n\xf6\xe1g\x9e$\xc9\x83\x81u\xaa\x89k\x8d\x82<\x04\xf4(\r\xe9\x1e\xabG\x9e]f\n\x80\xf4\t\x93\x8bT\xf0\xa0\x05\xcf<\xbbH2,\x86\x1a\xc7\xba\x83\x9e\xcf\xa2Y\xa7\xfb|\x8cr\x06w\x08\r\x1bEj\nC\xa9\n)\x99\xc4\xa9\x14\x03\x06t\xee\'fp9/\x8ek\xaa\xb0\xf4\xc6\xa9\xcb\x8b\xd3+]<\xb7-j0\x18\x16Qn\x80(A\xf2\xd4\xaf\x9c)\x9fN\xe0\r(\x05cv\xa2\x7f"[u7\xa5\xb8\x1ba\x1eJ\xa1\x96\xded\xbf\xce\xc1bu9g\xdeb*7SUz\xfa\x866Z\xaf\xbb{W\xa0\x16=\xed\xa5\x07\xa9:Q\xb3ca!0EN\x90\x16R\xe6\xa2\xa4\xec9<g r\xfbi\xfa2.\xd4\x81\xafK\x80\x11-C\x05\xd6\xbc>\xb6;i+eAi\xc6\xc3\xba\x93\x1b\xb3\xf5tq\xf23\xe7A\xc7<8\x1a\xda7\xbf4\x8b\x88\xce\x8c\x9b\x9d\x88\x11\xe0\xab\x175\x90^]\x95Rr\xf8\x1c\xca\xc0Q\x1a\x03\x84\xb5`xx\x08\xa4\x1b\xd5is\xe8\xc3\xd6\xd1;\x0e\x852h)h\x8aU\x9e\x11\x04/!lX\xbcP*\xc2\xcc\x91\x95\'\x1a\xf8\x8a\x9d\x80\t\xa1g\xaa\xc0Z\x11\x81\xb1FM\xb9\xc7 \xa8(x@\xb44\xb7\xb49\xef\t\x07\xa1\xebW\xa1\xe8\x1fY\xf3\x8b\xa4G\xb0U, \xce\xca\xa3\xca\xe8\x15\xca\xd4\xb8\x18\xb5\x1en\xc6}f\xf5\xc9,)\x19?\xcb\x8a\xb5\xd7\x8cH\x18^Zv\x1f\xb2\xc8eLK\x90uZ\x01\xb9\xb2\xc7\xc6\xbb5\xf0;\xcb\xfa\xb4\xae;\xe0T\xc4zQ\xd2\xfa\x84\x11U\x13\xe6\xf4l;\xdc\xb4\x12+aYJD\x9d\xe4\xa4u\xa5\x8e+\xa6&\xbd\xf8\xc9\xbe\xaa\x05\xc4EHC\xd4\x1f\x93\x92[\x9b;\xc6\xbfq\x1b\xebS?\x01\x91\x13\xe6VS\xaa\xc2\xa2\xac\xe9\x94\xf3\xe4\xc0\xe0\x1c\xa5\xd3\x89\xa6\xd9\x1aXIk\x96\x8f\xe4@t\xdc\xcb\xe9\nu\x8c\x12\x03\xdc\x871\xa1zT\xea\xdc\xcf\xffX\xa3\r\x8c\x82-)_?w\xcc\xe5\xc9\x11`\x93qzE\x9d\xe6s\xc4\xe9Q\x96\x0bs\x85(z[\xf7r\x07\x84\xc1\xad\xf2\x06\x89\x8b,\xa7\xf6\x965\x96\xfb\x04\xabs\xb3I;+t\xd5\xb3\x11\xfb\xc6\xa9\x94\x11\xce|WTl\xc6\x8fcpm\x83\x98\x93\x86Z\xa1\x9cX\xc5)B\xc1l\xc0\xa1\n\x0f\x99[3\x83\xdc\x1dQ\xf5{\xdd\xf6G@\xa72 L\xac\xa6\xa5\xab\xaaL\x19\x7f\x94\x1e=\t\xacz\x8c\xbd\xaf\x8c>\xb2v\xa4\x1b\xbcd\x99\xb2\xb6\xd9E\xab\xb1h\x9f^\xc1|\xab2`\x89@\x12Ay~\xa5\x0cR\xa0J\x1e\x94g\xb3\x92\xe1:\xe1\xc4\x80\xb5UPr,D\xb8\xb5{U\x04\x07\x84\x16a\xb1\x14\x11g\x00\x98\x06pe\xdb\x01\x86xg\x9ba\xb4O\xbf\xa4\x8d\x08\xcb/m\\\x16[\xd5$;S\x07\x01\xa6\x9e\xe4G\xc2\x82S<p\xb7\xce3 V\x88\x0cD\xf8:#`\x1c\x99\x16\xcf\x82"\x16t\xc0\xb5qD\xfc\xff\x00f\xaaB<sKq\x19n9\xc2,\xee\xd6\xf6\xca\xd2\x94\t'
        self.sign_pub_gs = b'\xfd\x83\x9f\x9f|w\x9a\xd0#\xf9S<\xdel\xc7y\x1b\x82n\x16\x13<\xc2\'\xb7 \xbaK!\xc9\x19"\xb12\xc1g(\x14T\xcf\xa3\x87q\x9c6AX\x08\x04Z`\n\xcc\x99\xd0\xe7\x80!\xb2C\xe7\x85\x10\x911\x81\xef\xa3\xae\xfe\xd3\x8d\xaf\xd7^~qB\x96\xfa?\xec\x13\x92\xb1P\xb0\xe6\x18l\xde\x8aK|S\xbc\xf7\x87\x16d\xc5\x1fi\xc5\x0eL\xf6\x93\x8b\xf5\xc2N\xc96\x93$\xc0\xd5\xe6\xa1G\xc08\xc7(\x9a\x1c\xd2\xc8\xfa\x94\x87\x8fx\t\xa2p\xc8\x82\xf0\x15\x0c\x07y6\x01&6\xab\xb3qHE\xa127\xc0l\xa5L\x92\xc6\x84\x14w\xfe\xf2t8\xb3\xc4\xd3\xfc\x02\xd7&\x95\x03+\xc9\xe4\xa6\x03\x17\xf8}<\xb84j\xc4\xb7\x89S\xa7}\xfcx\xec\x8bKS\x88\xc3\xe8\x19\x88\xa5C\x894\xf6u\x17\xcbCX;\x1c\xb3\xb4`P\x99U\xbe\x00\xbf\x02kh\xed\xa8S\xc7\xd2:5\'}\x9f\xf0n]H\xa6\x08\xb5Z^G\x01\xb0\xf1\x80_\x83Uh\xf6v&\x8c\x1f\xc2p\t\x1b\xc6K>\x89?u\xbc\xc3\xa2\x96[]\x81\x83\xa1{\x92\x99\xcaf\x16w\x0e\xaeF\x1d\xe3f&\x91\xb8\xbc\x9c\xe6\x9e\xe2\xc7\x88\x88|\xbe\xe2\xf3\xb3p\xf5\x1f\xcd\x91\x86_ \x9d\xd1\xca\x893\xc3\xa91\x01%G\xbc4\x99\xea\x95\xc2\x18\xa0\xde\xa1\x15\x0b\x9b\x13\xeb\x9a\xa3\xa0\xd1%F\x11ua\xb6\x97\x13\xb8\xb0s\xe9S!$\xb3\x11\xa8>\x84\xcc\xa7r\xe7]\xf0I#\xae\xc8>j\x003\x80\nbZ\xd7\x97\x1e\xfbs\xa6\xa8Ko\xf0\x94\xfb\xc4\n\xf0\x99\xae\t*\xa9\xd5\x8a2Zz~\xc0\x927m\xa9a\x05yY\xb9\xfc\xady\xd6j\xb1\xd9a0\x98\x04\xcc;\x89\xbe\xc5\x9c\x0cL\xabO$?\x08\xc0~>\xb7\xb4\xc7;W\xa1\xf5w\xa0\x0b\xa3\x00\x04ERF\xc8\'\x03\xca\xb8\x149\x00\x11\x00*\x1b\\\x8c\x88L\xf4*\x18/\xc8\\2\xc6\xc1c\x8b&Q\xa8K\xae\x86\x11\x18\x8b \xc5$\xab\xb3U\x9b\x83B\x83Q\xd39\x8f\xb1+\x90\x19g\xf9\x02[Lt\xb9\xa5G\xcfy\x8bbm\xc6\xb4\xe4u\xbeqW\x87\xe1So\xe1\xb6>E*\n\x85\xe2\xa6,\x03\x87Q\xf8\xaa\xa7\xc9_\x10\x80REE\t\xf1\xb7\x80_b\x8c\xae\xc1vL\xe1\xbb\\\xd3lB\xd0$\x9f\xdc\xce\x9f\xab@\x93\xe31\x7f1\x91\xa7\xd1Ix\xb8?\xdf5\x12\xcb\xe8\x0f\xf2F\x85\xad\x8a\x0b\xaf\nF\xe8U\xc5\x84TH\x9d\xf74\xba!\x94\x8a\x82\x0e\x1aBC\xe5\x02\xc0\xa8UY\xd5\xbc\x00\xa2\xd8\xc7\xd0!\x84\x90z]\x97U&\xb5x\xab\xa5w\xad\x84\xd5\x9eJ\x0c\xa3\x8b\x8b\x1cm2\x9e\xb1\xe0\xa2\x03\xf9`\x81\xdc\xb4\xab;V-\xc2 {J$I\x06\x0f\xdd\xac&\x88\xb7\x1c\xa2\xebF\xa8\xa3\x84|[\x05\xf0\xe4(\xf7\xf7\xce\x92\x17s6\x10\x8d(\x08\x89\x12B\x9b\xb4\xfc\x86|Zi\xfa:tN\x15\x1c0X\x02\xd4\'G\x94U\x90K@S\xdc\n)\x8e\x936ztxu\x1bp\x9c,9)\xe9vE\x94\xd4\xe1]\xbb\xdah\xb2?\x02\x17\x97\x84\x1f6\xdcBCw\xdc\xe1\xecO\xd9L'
        self.randomnum = 0
        self.derived_es = b""
        self.sign_pub_hash = b""
        self.server_sign_ct = b""
        self.server_sign_pt = b""



    def send(self, message):
        """
        sends message through socket to server
        """
        try:
            self.socket.sendall(message.encode())

        except:
            # print("Encode error")
            # print(("Unexpected error:", sys.exc_info()[0]))
            pass

    def receive(self):
        """
        receives and returns message from server
        """
        input_line = None  # was None
        try:
            input_line = self.socket.recv(config.BUFFER_SIZE)
            input_line = input_line.decode()
        except:
            pass

        return input_line

    def recvall(self, size):
        result = b''
        remaining = size
        while remaining > 0:
            data = self.socket.recv(remaining)
            result += data
            remaining -= len(data)
        return result

    def take_action(self, action_name):
        """
        decides on base of action_name what action should be taken
        in some actions sends respond to the server
        """
        input_line = None
        if action_name == actions.QUIT_ACTION or len(action_name) == 0:
            return
        elif action_name == actions.KEM_ACTION:

            #generate pq encrytion key pair
            self.public_key, self.secret_key = generate_keypair()  # pq key pair
            input_line = self.public_key

            # generate ecc sign key pair
            self.ec_pri_key_as = ec.generate_private_key(
                ec.SECP256R1()
            )
            # print(len(self.private_key_as.private_bytes(encoding = serialization.Encoding.DER, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption())))
            self.ec_pub_key_as = self.ec_pri_key_as.public_key().public_bytes(serialization.Encoding.PEM,
                                                                               serialization.PublicFormat.SubjectPublicKeyInfo)


            # generate ecc ENCRYPTION key pair
            self.ec_sk_en = ec.generate_private_key(
                ec.SECP256R1()
            )
            # print(len(self.private_key_as.private_bytes(encoding = serialization.Encoding.DER, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption())))
            self.ec_pk_en = self.ec_sk_en.public_key().public_bytes(serialization.Encoding.PEM,
                                                                              serialization.PublicFormat.SubjectPublicKeyInfo)

            # encapsulate server sign pqK
            self.server_sign_ct, self.server_sign_pt = encrypt(self.sign_pub_gs)
            self.randomnum = get_random_bytes(16)

            self.sign_pub_hash = hashlib.sha256(self.sign_pub).digest()

            self.socket.send(self.public_key + self.randomnum + self.server_sign_ct + self.sign_pub_hash)
            self.socket.send(self.ec_pub_key_as)
            self.socket.send(self.sign_pub)
            self.socket.send(self.ec_pk_en)

           #AC action after receiving response from server
            self.kem_receive_action()


        elif action_name == actions.TYPE_ACTION:
            input_line = input(b">> ")  # get action type
        else:  # other communicate from server
            print(action_name)  # show it
            return

        if len(input_line) == 0:
            input_line = b"__"
        self.send(input_line)  # send answer to server if needed

    def kem_receive_action(self):
        """
        method for final key calculation after the GS responds
        Receive values are specifically written for chosen primitives.
        Can be modified according to preferred crypto module.

        """
        combined = self.recvall(752)
        rcv_gs_ecc = self.recvall(178)
        rcv_en_ecc = self.recvall(178)
        rcv_sign_ct = self.recvall(736)
        rcv_hash = self.recvall(32)
        rcv_mac = self.recvall(32)
        e_ciphertext = combined[:-16]
        rcvd_rand = combined[736:]

        compare_digest = hashlib.sha256(self.sign_pub_gs).digest()
        result = (rcv_hash == compare_digest)

        if (result):

            ecc_key_gs_decoded = load_pem_public_key(rcv_gs_ecc, default_backend())
            shared_ec_key = self.ec_pri_key_as.exchange(ec.ECDH(), ecc_key_gs_decoded)

            ecc_enK_gs_decoded = load_pem_public_key(rcv_en_ecc, default_backend())
            shared_ec_enK = self.ec_sk_en.exchange(ec.ECDH(), ecc_enK_gs_decoded)


            #early sign key derivation
            early_secret = hkdf_extract(shared_ec_key, self.server_sign_pt)
            self.derived_es = hkdf_expand(early_secret, info=b"derived")#hybrid sign key


            # early encryption key derivation
            decap_encK = decrypt(self.secret_key, e_ciphertext)
            early_en_secret = hkdf_extract(shared_ec_enK, decap_encK)  # hybrid encryption key
            derived_en_es = hkdf_expand(early_en_secret, info=b"derived")

            #early secret derivation

            hs = hkdf_extract(self.derived_es, derived_en_es)
            derived_hs = hkdf_expand(hs, info=b"derived")


            #decap sign key
            decap_signK = decrypt(self.sign_pri,rcv_sign_ct)

            #final key derivation

            master_secret = hkdf_extract(derived_hs, decap_signK)
            fk_c = hkdf_expand(master_secret, info=b"c finished")
            fk_s = hkdf_expand(master_secret, info=b"s finished")



            mac_timer_start=perf_counter_ns()
            calculate_mac = hmac.digest(key=fk_s, msg=b"sign key", digest=hashlib.sha256)
            mac_timer_stop = perf_counter_ns()

            print('fk_c', fk_c)
            print('fk_s', fk_s)

    def handle_connection(self):
        """
        main function to handle connection with server
        """

        action_name = "_"
        while action_name != actions.QUIT_ACTION and len(action_name) != 0:
            action_name = self.receive()
            actions_array = action_name.splitlines()

            for action in actions_array:
                self.take_action(action)

        print("Connection closed")
        self.socket.close()  # Close the socket when done
